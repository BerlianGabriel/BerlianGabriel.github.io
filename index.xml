<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Berlian Gabriel</title>
    <link>https://berliangabriel.github.io/</link>
    <description>Recent content on Berlian Gabriel</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 03 Dec 2023 19:32:26 +0700</lastBuildDate><atom:link href="https://berliangabriel.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CyberJawara CTF 2023</title>
      <link>https://berliangabriel.github.io/post/cyberjawara-ctf-2023/</link>
      <pubDate>Sun, 03 Dec 2023 19:32:26 +0700</pubDate>
      
      <guid>https://berliangabriel.github.io/post/cyberjawara-ctf-2023/</guid>
      <description>Web Wonder Drive (5 Solves, 850 Points)
The code snippet below posses security risks. The idea is to create additional new entry of an arbitrary path to access_file
if request.method == &amp;#39;POST&amp;#39;: access_file = f&amp;#34;accounts/{username}/access&amp;#34; with open(access_file, &amp;#34;a&amp;#34;, encoding=&amp;#34;ascii&amp;#34;) as f: f.write(f&amp;#34;{data[&amp;#39;filepath&amp;#39;]}\n&amp;#34;) return redirect(url_for(&amp;#39;user_repository_root&amp;#39;, username=username)) we want to add repository/wonderadmin/flag.txt to access_file, and we can do so by abusing the newline character.
data[&#39;filepath&#39;] = test..%0arepository/wonderadmin/flag.txt when the above payload is executed, it will write repository/wonderadmin/flag.</description>
    </item>
    
    <item>
      <title>1337UP CTF 2023</title>
      <link>https://berliangabriel.github.io/post/1337up-ctf-2023/</link>
      <pubDate>Sun, 19 Nov 2023 09:56:13 +0700</pubDate>
      
      <guid>https://berliangabriel.github.io/post/1337up-ctf-2023/</guid>
      <description>Cryptography 1-10 (31 Solves, 464 Points)
In the equation, xs, which is only 64 bits, is much smaller than cs, which is 1000 bits. Since the values of cs are known, LLL lattice reduction can be used to retrieve the values of new xs.
The following operation to generate the new xs basically only replaces the last 3 digits of the original xs with the integers representing the Unicode of the FLAG content (which are also 3 digits).</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://berliangabriel.github.io/contact/</link>
      <pubDate>Sat, 21 Oct 2023 07:59:27 +0700</pubDate>
      
      <guid>https://berliangabriel.github.io/contact/</guid>
      <description>berlian.gabriel@u.nus.edu</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://berliangabriel.github.io/about/</link>
      <pubDate>Sat, 21 Oct 2023 07:59:23 +0700</pubDate>
      
      <guid>https://berliangabriel.github.io/about/</guid>
      <description>Crypto player for team Fidethus under the name berlian</description>
    </item>
    
    <item>
      <title>TCP1P CTF 2023</title>
      <link>https://berliangabriel.github.io/post/tcp1p-ctf-2023/</link>
      <pubDate>Wed, 18 Oct 2023 19:33:11 +0700</pubDate>
      
      <guid>https://berliangabriel.github.io/post/tcp1p-ctf-2023/</guid>
      <description>It was an exhilarating experience to compete in TCP1P CTF as team Fidethus, with Chovid99 and Djavaa. Despite narrowly missing out on the Top 3, securing a 4th place finish was a tremendous honor, especially considering we were a three-member team competing against teams with many more members. Below is the write-up for some of the challenges that we solved. Cryptography Jack&amp;rsquo;s Worst Trials (7 Solves, 464 Points)
From the source code, it can be seen that the jwt.</description>
    </item>
    
    <item>
      <title>SECCON CTF 2022 Skipinx</title>
      <link>https://berliangabriel.github.io/post/seccon-ctf-2022-skipinx/</link>
      <pubDate>Tue, 17 Oct 2023 00:49:51 +0700</pubDate>
      
      <guid>https://berliangabriel.github.io/post/seccon-ctf-2022-skipinx/</guid>
      <description>I solved this challenge when competing with my team Fidethus, under the username berlian_gm. The files can be downloaded here and run locally with Docker.
The Problem The goal of this challenge, just like the title of the challenge implies, is to bypass the Nginx. Trying to access the port 8080 returns the following:
❯ curl localhost:8080/ Access here directly, not via nginx :( After checking nginx/default.conf, we can see that the Nginx append the following parameter: proxy=nginx at the end of the query parameter, before proxying the request to backend server.</description>
    </item>
    
  </channel>
</rss>
