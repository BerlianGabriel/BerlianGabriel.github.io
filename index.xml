<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Berlian Gabriel</title>
    <link>https://berliangabriel.github.io/</link>
    <description>Recent content on Berlian Gabriel</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 07 Jul 2024 17:05:51 +0800</lastBuildDate>
    <atom:link href="https://berliangabriel.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DUCTF 2024</title>
      <link>https://berliangabriel.github.io/post/ductf-2024/</link>
      <pubDate>Sun, 07 Jul 2024 17:05:51 +0800</pubDate>
      <guid>https://berliangabriel.github.io/post/ductf-2024/</guid>
      <description>V for Vieta Implementing Vieta jumping algorithm&#xA;Problem The following source code is given.&#xA;#!/usr/bin/env python3 import os import random import json from enum import Enum FLAG = os.getenv(&amp;#34;FLAG&amp;#34;, &amp;#34;DUCTF{dummy_flag}&amp;#34;) class State(Enum): INITIAL = 1 TEST = 2 QUIT = 3 class Server: def __init__(self): self.level = 2048 self.target = 2048 self.finish = 8 self.state = State.INITIAL def win(self): return { &amp;#34;flag&amp;#34;: FLAG, } def generate_k(self): self.k = random.getrandbits(self.level) ** 2 self.</description>
    </item>
    <item>
      <title>UIUCTF 2024 Writeup</title>
      <link>https://berliangabriel.github.io/post/uiuctf-2024/</link>
      <pubDate>Mon, 01 Jul 2024 06:57:26 +0800</pubDate>
      <guid>https://berliangabriel.github.io/post/uiuctf-2024/</guid>
      <description>Key in a Haystack Finding a prime factor via small subgroups using Pollard&#39;s p-1 algorithm&#xA;Problem We were given a flag encrypted with AES-ECB using a 40-bit prime key. The key is then multiplied with 300 1024-bit primes, and the result is given to us. The following source code is given:&#xA;from Crypto.Util.number import getPrime from Crypto.Util.Padding import pad from Crypto.Cipher import AES from hashlib import md5 from math import prod import sys from secret import flag key = getPrime(40) haystack = [ getPrime(1024) for _ in range(300) ] key_in_haystack = key * prod(haystack) enc_flag = AES.</description>
    </item>
    <item>
      <title>Google CTF 2024 Writeup</title>
      <link>https://berliangabriel.github.io/post/google-ctf-2024/</link>
      <pubDate>Mon, 24 Jun 2024 00:24:37 +0800</pubDate>
      <guid>https://berliangabriel.github.io/post/google-ctf-2024/</guid>
      <description>Desfunctional The Complement Property of Triple Data Encryption Standard (3DES) with three 56-bit keys in CBC mode&#xA;Problem The challenge has 3 functionality:&#xA;Retrieve the secret encrypted with 3DES 192 bit key in CBC mode Submit any input (in hex string form) which will be decrypted using the same iv, but a corrupted key, and get the result. A maximum of 128 decryption requests can be made. Guess the plaintext of the encrypted secret to get the flag The iv is not given.</description>
    </item>
    <item>
      <title>Crypto CTF 2024</title>
      <link>https://berliangabriel.github.io/post/crypto-ctf-2024/</link>
      <pubDate>Sun, 09 Jun 2024 21:45:16 +0800</pubDate>
      <guid>https://berliangabriel.github.io/post/crypto-ctf-2024/</guid>
      <description>RM2 - Safe Prime and Sophie Germaine Prime Breaking custom RSA implementation by supplying p and q that are both safe primes and Sophie Germaine primes&#xA;The Problem We need to decrypt encrypted data to retrieve a flag. It operates as follows:&#xA;Setup and Prime Validation: The script prompts users to enter two 1024-bit prime numbers, p and q, which must be distinct and valid primes.&#xA;Message Encryption: The script generates a random 64-character string, converts it to a long integer, and splits it into two halves, m1 and m2.</description>
    </item>
    <item>
      <title>Cyber Apocalypse CTF 2024 Writeup: Web</title>
      <link>https://berliangabriel.github.io/post/cyber-apocalypse-ctf-2024/</link>
      <pubDate>Thu, 14 Mar 2024 20:05:02 +0800</pubDate>
      <guid>https://berliangabriel.github.io/post/cyber-apocalypse-ctf-2024/</guid>
      <description>Testimonial This vulnerable part of the code in grpc.go will allow us to perform arbitrary file write. From there we can overwrite the index.templ to include exec() command, and the output will be displayed in the testimonial box.&#xA;err := os.WriteFile(fmt.Sprintf(&amp;#34;public/testimonials/%s&amp;#34;, req.Customer), []byte(req.Testimonial), 0644) We need the following python libaray to interact directly with the gRPC server:&#xA;pip install grpcio grpcio-tools Inside the folder that has the .proto file, which in this case is \challenge\pb\pytypes.</description>
    </item>
    <item>
      <title>Shakti CTF 2024 Writeup: Forensic and OSINT</title>
      <link>https://berliangabriel.github.io/post/shakti-ctf-2024-foren/</link>
      <pubDate>Sun, 10 Mar 2024 16:05:16 +0800</pubDate>
      <guid>https://berliangabriel.github.io/post/shakti-ctf-2024-foren/</guid>
      <description>It was tiring but rewarding. Me and my duo Chovid99 won the 1st place at the shakti CTF 2024, playing as Fidethus. We managed to solve all challenges in Crypto, Web, pwn, reverse, and OSINT category. Competing as a team of two in a competition with no limit on the number of group members is always challenging. Although the prize only goes to the top all-woman team, we are very appreciative to the organizers for this unique CTF.</description>
    </item>
    <item>
      <title>Shakti CTF 2024 Writeup: All Crypto Challenges</title>
      <link>https://berliangabriel.github.io/post/shakti-ctf-2024-crypto/</link>
      <pubDate>Sat, 09 Mar 2024 20:36:03 +0800</pubDate>
      <guid>https://berliangabriel.github.io/post/shakti-ctf-2024-crypto/</guid>
      <description>It was tiring but rewarding. Me and my duo Chovid99 won the 1st place at the shakti CTF 2024, playing as Fidethus. We managed to solve all challenges in Crypto, Web, pwn, reverse, and OSINT category. Competing as a team of two in a competition with no limit on the number of group members is always challenging. Although the prize only goes to the top all-woman team, we are very appreciative to the organizers for this unique CTF.</description>
    </item>
    <item>
      <title>GCC CTF 2024 Write-up</title>
      <link>https://berliangabriel.github.io/post/gcc-ctf-2024/</link>
      <pubDate>Mon, 04 Mar 2024 03:12:54 +0800</pubDate>
      <guid>https://berliangabriel.github.io/post/gcc-ctf-2024/</guid>
      <description>Cryptography Too Many Leaks A Hidden Number Problem attack using LLL algorithm to recover Diffie-Hellman shared secret from the leak of its most significant bits.&#xA;(39 Solves, 397 Points)&#xA;The Problem The following python script and output text files were given. The problematic part of the code is shown below.&#xA;# What ?! mask = ((1 &amp;lt;&amp;lt; 256) - 1 &amp;lt;&amp;lt; 256) + (1 &amp;lt;&amp;lt; 255) r1 = s &amp;amp; mask print(f&amp;#34;{r1=}&amp;#34;) This is a masking operation which will reveal a certain part of the shared secret between Alice and Bob.</description>
    </item>
    <item>
      <title>bi0s CTF 2024 Write-up</title>
      <link>https://berliangabriel.github.io/post/bi0s-ctf-2024/</link>
      <pubDate>Mon, 26 Feb 2024 07:43:29 +0800</pubDate>
      <guid>https://berliangabriel.github.io/post/bi0s-ctf-2024/</guid>
      <description>Cryptography challengename ECDSA Nonce Reuse Attack due to flawed custom implementation of nonce XOR-ing. Recovering a and b value from two known curve points, the Public Key and Encryption Result&#xA;We were given 2 points from the same curve, Public Key which is equal to dG, and Encrypted Flag which is equal to dF. We can use this two points as (x1,y1) and (x2,y2) to make the curve equation becomes a system of linear equation and solve it to recover a and b.</description>
    </item>
    <item>
      <title>All Cryptography Challenges in 0xL4ugh CTF 2024</title>
      <link>https://berliangabriel.github.io/post/0xl4ugh-ctf-2024/</link>
      <pubDate>Sat, 10 Feb 2024 22:18:48 +0800</pubDate>
      <guid>https://berliangabriel.github.io/post/0xl4ugh-ctf-2024/</guid>
      <description>L4ugh LLL Attack on Common Private Exponent RSA, Bit-flipping Attack on AES CBC via user-controlled iv&#xA;To solve this challenge we need to obtain both d_evil and d_good. There is a mathematical correlation between d_evil and d_good which can be used to obtain d. This d value is needed to enter the AES section and obtain the flag.&#xA;1st Step: Obtaining d_evil We got this output from the program&#xA;option: {&amp;#34;option&amp;#34;: &amp;#34;1&amp;#34;} Ns=[63177871485525088951181443705081041461634543859522117456351661402080497656013624345546070712850495609948764684183439400179805537891875164625989052253083230659226521596768360072707440507270327177188344955333689656692052942117636523598888566332378334484989635662511781875819463942251573589312702111067666695137, 68417337722533900652500729977779356663072309260168978032066078964139516598349612942585273964747232440917208024070944878746826859130026151601011616528313228935586842217368126736111151916711142015199565420639331316508069640571601570035232358801113829472768752560859144386001410351637727931231353571569134609613, 168215881121069104898729985793627403151351981328884254464192670823030720417667002544672696986252246417961681145401431457093773120629615493457032091565389427445918129884222127717793599651891523817691046412371891919053448963038240278703665244310516285574823513905266879981762459903701984822492196244463862082391] es=[12582085533392574037164768248411138060403343393202613693550614803000172294230368141692552003822419391035797084039299201901512976645994807330716118571915746013990494151810672823831168856260922412164054599692289888776400447431070962333675221317644750501553797025822331524893012554824564175094394720928485195797, 52991328407753481067902974746673138076572011687788467203911629995517206407307922740860404612421208610353519701472906794085957060352155035124317720744806171291972518225378971560363131225736966114292306895861938499450530895659529573837086398127260636837343320713697820328407358447537105167261121423215194249369, 12716000118173422228503985827797768395368925658432766439952368872498203791862354466845685008653376234224733294978052658757583825714636644392177238952806721471327627920018233106907442613769777864456001744370303817106405311946809104397220107151351200204233662456907101573711002774913538347184439597239543099945] We are in a situation where we have a few public key pairs that were derived from the same private exponent (d_evil).</description>
    </item>
    <item>
      <title>Mapna CTF 2024</title>
      <link>https://berliangabriel.github.io/post/mapna-ctf-2024/</link>
      <pubDate>Sun, 21 Jan 2024 21:50:22 +0800</pubDate>
      <guid>https://berliangabriel.github.io/post/mapna-ctf-2024/</guid>
      <description>Web Flag Holding The flag can be found by modifying the GET request as follow:&#xA;Host: 18.184.219.56:8080 Cache-Control: max-age=0 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.6045.199 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 Referer: http://flagland.internal/ Accept-Encoding: gzip, deflate, br Accept-Language: en-US,en;q=0.9 Connection: close FLAG: MAPNA{533m5-l1k3-y0u-kn0w-h77p-1836a2f}&#xA;Novel Reader There is a path traversal vulnerability which can be used to retrieve the 1st flag. Only checking the path name is starting with &amp;lsquo;public&amp;rsquo; is not sufficient to prevent path traversal:</description>
    </item>
    <item>
      <title>CyberJawara CTF 2023</title>
      <link>https://berliangabriel.github.io/post/cyberjawara-ctf-2023/</link>
      <pubDate>Sun, 03 Dec 2023 19:32:26 +0700</pubDate>
      <guid>https://berliangabriel.github.io/post/cyberjawara-ctf-2023/</guid>
      <description>Web Wonder Drive Abusing newline character to append arbitrary filepath to obtain unauhtorized access in a drive sharing webapp&#xA;(5 Solves, 850 Points)&#xA;The code snippet below posses security risks. The idea is to create additional new entry of an arbitrary path to access_file&#xA;if request.method == &amp;#39;POST&amp;#39;: access_file = f&amp;#34;accounts/{username}/access&amp;#34; with open(access_file, &amp;#34;a&amp;#34;, encoding=&amp;#34;ascii&amp;#34;) as f: f.write(f&amp;#34;{data[&amp;#39;filepath&amp;#39;]}\n&amp;#34;) return redirect(url_for(&amp;#39;user_repository_root&amp;#39;, username=username)) access_file is a file that controls the path an account can access.</description>
    </item>
    <item>
      <title>1337UP CTF 2023</title>
      <link>https://berliangabriel.github.io/post/1337up-ctf-2023/</link>
      <pubDate>Sun, 19 Nov 2023 09:56:13 +0700</pubDate>
      <guid>https://berliangabriel.github.io/post/1337up-ctf-2023/</guid>
      <description>Cryptography 1-10 (31 Solves, 464 Points)&#xA;In the equation, xs, which is only 64 bits, is much smaller than cs, which is 1000 bits. Since the values of cs are known, LLL lattice reduction can be used to retrieve the values of new xs.&#xA;The following operation to generate the new xs basically only replaces the last 3 digits of the original xs with the integers representing the Unicode of the FLAG content (which are also 3 digits).</description>
    </item>
    <item>
      <title>Contact</title>
      <link>https://berliangabriel.github.io/contact/</link>
      <pubDate>Sat, 21 Oct 2023 07:59:27 +0700</pubDate>
      <guid>https://berliangabriel.github.io/contact/</guid>
      <description>berlian.gabriel@u.nus.edu</description>
    </item>
    <item>
      <title>About</title>
      <link>https://berliangabriel.github.io/about/</link>
      <pubDate>Sat, 21 Oct 2023 07:59:23 +0700</pubDate>
      <guid>https://berliangabriel.github.io/about/</guid>
      <description>Crypto player for team Fidethus under the name berlian</description>
    </item>
    <item>
      <title>TCP1P CTF 2023</title>
      <link>https://berliangabriel.github.io/post/tcp1p-ctf-2023/</link>
      <pubDate>Wed, 18 Oct 2023 19:33:11 +0700</pubDate>
      <guid>https://berliangabriel.github.io/post/tcp1p-ctf-2023/</guid>
      <description>It was an exhilarating experience to compete in TCP1P CTF as team Fidethus, with Chovid99 and Djavaa. Despite narrowly missing out on the Top 3, securing a 4th place finish was a tremendous honor, especially considering we were a three-member team competing against teams with many more members. Below is the write-up for some of the challenges that we solved. Cryptography Jack&amp;rsquo;s Worst Trials (7 Solves, 464 Points)&#xA;From the source code, it can be seen that the jwt.</description>
    </item>
    <item>
      <title>SECCON CTF 2022 Skipinx</title>
      <link>https://berliangabriel.github.io/post/seccon-ctf-2022-skipinx/</link>
      <pubDate>Tue, 17 Oct 2023 00:49:51 +0700</pubDate>
      <guid>https://berliangabriel.github.io/post/seccon-ctf-2022-skipinx/</guid>
      <description>I solved this challenge when competing with my team Fidethus, under the username berlian_gm. The files can be downloaded here and run locally with Docker.&#xA;The Problem The goal of this challenge, just like the title of the challenge implies, is to bypass the Nginx. Trying to access the port 8080 returns the following:&#xA;❯ curl localhost:8080/ Access here directly, not via nginx :( After checking nginx/default.conf, we can see that the Nginx append the following parameter: proxy=nginx at the end of the query parameter, before proxying the request to backend server.</description>
    </item>
  </channel>
</rss>
