<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Paper</title>
    <link>https://berliangabriel.github.io/</link>
    <description>Recent content on Paper</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 18 Oct 2023 19:33:11 +0700</lastBuildDate><atom:link href="https://berliangabriel.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TCP1P CTF 2023</title>
      <link>https://berliangabriel.github.io/post/tcp1p-ctf-2023/</link>
      <pubDate>Wed, 18 Oct 2023 19:33:11 +0700</pubDate>
      
      <guid>https://berliangabriel.github.io/post/tcp1p-ctf-2023/</guid>
      <description>Cryptography Jack&amp;rsquo;s Worst Trials (7 Solves, 464 Points) ![[app.py]]
From the source code, it can be seen that the jwt.decode() does not enforce the algorithm. This indicates that we might be able to forge a JWT and sign in with the public key, using the HS256 algorithm. The problem is, the part of the code to fetch the website&amp;rsquo;s public key has been commented out. This means we have to find another way to retrieve the public key.</description>
    </item>
    
    <item>
      <title>SECCON CTF 2022 Skipinx</title>
      <link>https://berliangabriel.github.io/post/seccon-ctf-2022-skipinx/</link>
      <pubDate>Tue, 17 Oct 2023 00:49:51 +0700</pubDate>
      
      <guid>https://berliangabriel.github.io/post/seccon-ctf-2022-skipinx/</guid>
      <description>I solved this challenge when competing with my team Fidethus, under the username berlian_gm. The files can be downloaded here and run locally with Docker.
The Problem The goal of this challenge, just like the title of the challenge implies, is to bypass the Nginx. Trying to access the port 8080 returns the following:
❯ curl localhost:8080/ Access here directly, not via nginx :( After checking nginx/default.conf, we can see that the Nginx append the following parameter: proxy=nginx at the end of the query parameter, before proxying the request to backend server.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://berliangabriel.github.io/app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://berliangabriel.github.io/app/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://berliangabriel.github.io/jack.py/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://berliangabriel.github.io/jack.py/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
